<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://review.rob-blog.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://review.rob-blog.co.uk/" rel="alternate" type="text/html" /><updated>2025-07-21T12:37:14+01:00</updated><id>https://review.rob-blog.co.uk/feed.xml</id><title type="html">Robbie’s Blog - Review Site</title><subtitle>Review and staging environment for blog posts and features.</subtitle><entry><title type="html">Building A Compute Library</title><link href="https://review.rob-blog.co.uk/2025/08/01/building-a-compute-library.html" rel="alternate" type="text/html" title="Building A Compute Library" /><published>2025-08-01T00:00:00+01:00</published><updated>2025-08-01T00:00:00+01:00</updated><id>https://review.rob-blog.co.uk/2025/08/01/building-a-compute-library</id><content type="html" xml:base="https://review.rob-blog.co.uk/2025/08/01/building-a-compute-library.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>This project started during my PhD as I stumbled across the wonderful world of <a href="https://en.wikipedia.org/wiki/Computational_science">scientific computing</a>, where complex physics/maths problems are solved through numerical methods. There are many many aspects to this realm that focus on algorithms and hardware. In this first blog I am focusing on the backend development of my own compute library <code class="language-plaintext highlighter-rouge">tensor-cpp</code> that I will hopefully be able to use during my PhD to develop a <a href="https://en.wikipedia.org/wiki/Finite_volume_method">Finite volume method (FVM)</a> or <a href="https://en.wikipedia.org/wiki/Finite_element_method">Finite element method (FEM)</a> library to model the development of plasma channels for various pulsed power applications.</p>

<p>There are a tonne of great libraries that are already used such as Eigen <a href="#citeproc_bib_item_1">[1]</a>, a fantastic linear algebra library that allows expression-template-based <a href="#citeproc_bib_item_2">[2]</a> work relating to matrices, vectors, etc.</p>

<p>Again one of the interesting ideas I thought would be good to learn was how to properly work with GPUs for scientific computing as the original extent of my knowledge was f32 = bad, and f64 = good. So supporting heterogenous backends with GPU acceleration became one of the ever growing goals to this <code class="language-plaintext highlighter-rouge">tensor-cpp</code></p>

<h1 id="designing-the-library">Designing the Library</h1>

<p>I think the quote “First, solve the problem. Then, <del>write the code</del> implement the solution.” by John Johnson is a good philosphy to live by when developing any new engineering solutions be that in software or hardware worlds. Therefore the first steps were to properly define the scope of our project so we dont inccur <a href="https://en.wikipedia.org/wiki/Technical_debt">tech debt</a> or have massive <a href="https://en.wikipedia.org/wiki/Scope_creep">scope creep</a> along the development lifecycle.</p>

<p>My main wants really stemmed from wanting to learn about scientific computing and HPC in more depth purely for understanding how more complex numerical methods are implemented in simulation software however I managed to define some motivations for the library that stemmed from practical needs of my own if I wanted to continue taking this further, these were:</p>

<ul>
  <li>
    <p><strong>Backend-Agnostic Architecture</strong> - The library should be flexibile enough to target different hardware - be that CPU or GPU - without rewriting algorithms for each backend as that would be terribly tedious.</p>
  </li>
  <li>
    <p><strong>Zero-Cost Abstractions</strong> - Honestly this wasn’t a goal at first but after reading about libraries like Eigen, the idead of having abstractions without additonal performance cost sounded great to learn about.</p>
  </li>
  <li>
    <p><strong>Extensible</strong> - The architecture should clearly seperate the concerns of backend operations and computation logic to make it easier to develop the library further as well as for others to pick it up if they so desire.</p>
  </li>
  <li>
    <p><strong>Performance Driven</strong> - High performance is required for large scale simulations and to ensure that these don’t go crazy throughout the lifetime of each simulation it is imperative that we can observe the API’s ability with benchmarking and performance analysis.</p>
  </li>
</ul>

<h1 id="developing-an-agnostic-backend">Developing an Agnostic Backend</h1>

<p>I am currently doing all my laptop work on the apple silicon M2 chip which has served me well, therefore the first backend I wanted to be able to support was the Metal API apple provides, to be able to take advantage of the GPU stack.</p>

<p>As a jumping off point, there is a good article that walks through the basic process of using Metal from C++ by <a href="https://larsgeb.github.io/2022/04/20/m1-gpu.html">Lars Gebraad</a>. This highlights the necessary processes involved in compiling the metal shaders and linking against the necessary frameworks.</p>

<p>Example of using a citation <a href="#citeproc_bib_item_3">[3]</a>. \( \frac{x^2}{x^3} \) is an example equation.
<a href="#citeproc_bib_item_4">[4]</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int main()
{
std::cout &lt;&lt; "Hello World"

}
</code></pre></div></div>

<h1 id="implementing-the-compute-layer">Implementing the Compute Layer</h1>

<p>Implementation</p>

<h1 id="expression-templates-and-lazy-evaluation">Expression Templates and Lazy Evaluation</h1>

<p>lets talk about expression templates</p>

<h1 id="sending-dispatch-commands">Sending Dispatch Commands</h1>

<p>lets talk about the dispatch commands</p>

<h1 id="managing-memory-and-resources">Managing Memory and Resources</h1>

<h1 id="raii-for-memory-safety-and-lifetime-management">RAII for Memory Safety and Lifetime Management</h1>

<h1 id="unified-buffer-abstraction-for-cpu-and-gpu">Unified Buffer Abstraction for CPU and GPU</h1>

<h1 id="memory-synchronisation">Memory Synchronisation</h1>

<h1 id="performance-and-testing">Performance and Testing</h1>

<h1 id="building-a-performance-measurement-framework">Building a Performance Measurement Framework</h1>

<h1 id="stastical-analysis-and-benchmarking">Stastical Analysis and Benchmarking</h1>

<h1 id="future-work">Future Work</h1>

<h1 id="references">References</h1>

<style>.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}</style>
<div class="csl-bib-body">
  <div class="csl-entry"><a id="citeproc_bib_item_1"></a>
    <div class="csl-left-margin">[1]</div><div class="csl-right-inline">G. Guennebaud, B. Jacob, and others, “Eigen v3,” 2010, <i>http://eigen.tuxfamily.org</i>.</div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_2"></a>
    <div class="csl-left-margin">[2]</div><div class="csl-right-inline">T. Veldhuizen, “Expression templates,” 1995, <i>https://www.cs.rpi.edu/ musser/design/blitz/exprtmpl.html</i>.</div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_3"></a>
    <div class="csl-left-margin">[3]</div><div class="csl-right-inline">D. A. S. Rees, “An introduction to compact finite differences.” [Online]. Available: <a href="https://people.bath.ac.uk/ensdasr/COMPACT/dasr.compact.pdf">https://people.bath.ac.uk/ensdasr/COMPACT/dasr.compact.pdf</a></div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_4"></a>
    <div class="csl-left-margin">[4]</div><div class="csl-right-inline">L. Gebraad, “M1 gpus for c++ science: Saxpy and finite differences.” [Online]. Available: <a href="https://larsgeb.github.io/2022/04/22/m1-gpu.html">https://larsgeb.github.io/2022/04/22/m1-gpu.html</a></div>
  </div>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Building A Compute Library</title><link href="https://review.rob-blog.co.uk/2025/06/01/building-a-compute-library.html" rel="alternate" type="text/html" title="Building A Compute Library" /><published>2025-06-01T00:00:00+01:00</published><updated>2025-06-01T00:00:00+01:00</updated><id>https://review.rob-blog.co.uk/2025/06/01/building-a-compute-library</id><content type="html" xml:base="https://review.rob-blog.co.uk/2025/06/01/building-a-compute-library.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>This project started during my PhD as I stumbled across the wonderful world of <a href="https://en.wikipedia.org/wiki/Computational_science">scientific computing</a>, where complex physics/maths problems are solved through numerical methods. There are many many aspects to this realm that focus on algorithms and hardware. In this first blog I am focusing on the backend development of my own compute library <code class="language-plaintext highlighter-rouge">tensor-cpp</code> that I will hopefully be able to use during my PhD to develop a <a href="https://en.wikipedia.org/wiki/Finite_volume_method">Finite volume method (FVM)</a> or <a href="https://en.wikipedia.org/wiki/Finite_element_method">Finite element method (FEM)</a> library to model the development of plasma channels for various pulsed power applications.</p>

<p>There are a tonne of great libraries that are already used such as Eigen <a href="#citeproc_bib_item_1">[1]</a>, a fantastic linear algebra library that allows expression-template-based <a href="#citeproc_bib_item_2">[2]</a> work relating to matrices, vectors, etc.</p>

<p>Again one of the interesting ideas I thought would be good to learn was how to properly work with GPUs for scientific computing as the original extent of my knowledge was f32 = bad, and f64 = good. So supporting heterogenous backends with GPU acceleration became one of the ever growing goals to this <code class="language-plaintext highlighter-rouge">tensor-cpp</code></p>

<h1 id="designing-the-library">Designing the Library</h1>

<p>I think the quote “First, solve the problem. Then, <del>write the code</del> implement the solution.” by John Johnson is a good philosphy to live by when developing any new engineering solutions be that in software or hardware worlds. Therefore the first steps were to properly define the scope of our project so we dont inccur <a href="https://en.wikipedia.org/wiki/Technical_debt">tech debt</a> or have massive <a href="https://en.wikipedia.org/wiki/Scope_creep">scope creep</a> along the development lifecycle.</p>

<p>My main wants really stemmed from wanting to learn about scientific computing and HPC in more depth purely for understanding how more complex numerical methods are implemented in simulation software however I managed to define some motivations for the library that stemmed from practical needs of my own if I wanted to continue taking this further, these were:</p>

<ul>
  <li>
    <p><strong>Backend-Agnostic Architecture</strong> - The library should be flexibile enough to target different hardware - be that CPU or GPU - without rewriting algorithms for each backend as that would be terribly tedious.</p>
  </li>
  <li>
    <p><strong>Zero-Cost Abstractions</strong> - Honestly this wasn’t a goal at first but after reading about libraries like Eigen, the idead of having abstractions without additonal performance cost sounded great to learn about.</p>
  </li>
  <li>
    <p><strong>Extensible</strong> - The architecture should clearly seperate the concerns of backend operations and computation logic to make it easier to develop the library further as well as for others to pick it up if they so desire.</p>
  </li>
  <li>
    <p><strong>Performance Driven</strong> - High performance is required for large scale simulations and to ensure that these don’t go crazy throughout the lifetime of each simulation it is imperative that we can observe the API’s ability with benchmarking and performance analysis.</p>
  </li>
</ul>

<h1 id="developing-an-agnostic-backend">Developing an Agnostic Backend</h1>

<p>I am currently doing all my laptop work on the apple silicon M2 chip which has served me well, therefore the first backend I wanted to be able to support was the Metal API apple provides, to be able to take advantage of the GPU stack.</p>

<p>As a jumping off point, there is a good article that walks through the basic process of using Metal from C++ by <a href="https://larsgeb.github.io/2022/04/20/m1-gpu.html">Lars Gebraad</a>. This highlights the necessary processes involved in compiling the metal shaders and linking against the necessary frameworks.</p>

<p>Example of using a citation <a href="#citeproc_bib_item_3">[3]</a>. \( \frac{x^2}{x^3} \) is an example equation.
<a href="#citeproc_bib_item_4">[4]</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int main()
{
std::cout &lt;&lt; "Hello World"

}
</code></pre></div></div>

<h1 id="implementing-the-compute-layer">Implementing the Compute Layer</h1>

<p>Implementation</p>

<h2 id="expression-templates-and-lazy-evaluation">Expression Templates and Lazy Evaluation</h2>

<p>lets talk about expression templates</p>

<h2 id="sending-dispatch-commands">Sending Dispatch Commands</h2>

<p>lets talk about the dispatch commands</p>

<h1 id="managing-memory-and-resources">Managing Memory and Resources</h1>

<h2 id="raii-for-memory-safety-and-lifetime-management">RAII for Memory Safety and Lifetime Management</h2>

<h2 id="unified-buffer-abstraction-for-cpu-and-gpu">Unified Buffer Abstraction for CPU and GPU</h2>

<h2 id="memory-synchronisation">Memory Synchronisation</h2>

<h1 id="performance-and-testing">Performance and Testing</h1>

<h2 id="building-a-performance-measurement-framework">Building a Performance Measurement Framework</h2>

<h2 id="stastical-analysis-and-benchmarking">Stastical Analysis and Benchmarking</h2>

<h1 id="future-work">Future Work</h1>

<h1 id="references">References</h1>

<style>.csl-left-margin{float: left; padding-right: 0em;}
 .csl-right-inline{margin: 0 0 0 1em;}</style>
<div class="csl-bib-body">
  <div class="csl-entry"><a id="citeproc_bib_item_1"></a>
    <div class="csl-left-margin">[1]</div><div class="csl-right-inline">G. Guennebaud, B. Jacob, and others, “Eigen v3,” 2010, <i>http://eigen.tuxfamily.org</i>.</div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_2"></a>
    <div class="csl-left-margin">[2]</div><div class="csl-right-inline">T. Veldhuizen, “Expression templates,” 1995, <i>https://www.cs.rpi.edu/ musser/design/blitz/exprtmpl.html</i>.</div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_3"></a>
    <div class="csl-left-margin">[3]</div><div class="csl-right-inline">D. A. S. Rees, “An introduction to compact finite differences.” [Online]. Available: <a href="https://people.bath.ac.uk/ensdasr/COMPACT/dasr.compact.pdf">https://people.bath.ac.uk/ensdasr/COMPACT/dasr.compact.pdf</a></div>
  </div>
  <div class="csl-entry"><a id="citeproc_bib_item_4"></a>
    <div class="csl-left-margin">[4]</div><div class="csl-right-inline">L. Gebraad, “M1 gpus for c++ science: Saxpy and finite differences.” [Online]. Available: <a href="https://larsgeb.github.io/2022/04/22/m1-gpu.html">https://larsgeb.github.io/2022/04/22/m1-gpu.html</a></div>
  </div>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Testing Equation Numbering</title><link href="https://review.rob-blog.co.uk/testing/math/2025/01/21/testing-equation-numbering.html" rel="alternate" type="text/html" title="Testing Equation Numbering" /><published>2025-01-21T00:00:00+00:00</published><updated>2025-01-21T00:00:00+00:00</updated><id>https://review.rob-blog.co.uk/testing/math/2025/01/21/testing-equation-numbering</id><content type="html" xml:base="https://review.rob-blog.co.uk/testing/math/2025/01/21/testing-equation-numbering.html"><![CDATA[<h1 id="testing-katex-equation-numbering">Testing KaTeX Equation Numbering</h1>

<p>This post demonstrates the new equation numbering system that works seamlessly with your org-mode workflow.</p>

<h2 id="basic-display-equations">Basic Display Equations</h2>

<p>Here’s a simple display equation using <code class="language-plaintext highlighter-rouge">\[ \]</code> syntax (auto-numbered):</p>

<p>[
E = mc^2
]</p>

<p>And another one using equation environment:</p>

<p>\begin{equation}
F = ma
\end{equation}</p>

<h2 id="labeled-equations">Labeled Equations</h2>

<p>You can add labels in your org-mode files for cross-referencing:</p>

<p>\begin{equation}\label{maxwell}
\nabla \times \mathbf{E} = -\frac{\partial \mathbf{B}}{\partial t}
\end{equation}</p>

<p>\begin{equation}\label{continuity}
\frac{\partial \rho}{\partial t} + \nabla \cdot \mathbf{j} = 0
\end{equation}</p>

<h2 id="cross-references">Cross-References</h2>

<p>Now you can reference equations in your text! For example:</p>

<ul>
  <li>Maxwell’s equation \eqref{maxwell} describes electromagnetic induction</li>
  <li>The continuity equation \eqref{continuity} expresses charge conservation</li>
  <li>Einstein’s mass-energy relation was shown in equation (1)</li>
</ul>

<h2 id="inline-math-unchanged">Inline Math (Unchanged)</h2>

<p>Your inline math continues to work exactly as before: ( \alpha = \frac{\beta}{\gamma} ) and ( x^2 + y^2 = z^2 ).</p>

<h2 id="complex-equations">Complex Equations</h2>

<p>The numbering works with complex multi-line equations too:</p>

<p>\begin{align}
\nabla \times \mathbf{E} &amp;= -\frac{\partial \mathbf{B}}{\partial t} <br />
\nabla \times \mathbf{B} &amp;= \mu_0\mathbf{j} + \mu_0\epsilon_0\frac{\partial \mathbf{E}}{\partial t} <br />
\nabla \cdot \mathbf{E} &amp;= \frac{\rho}{\epsilon_0} <br />
\nabla \cdot \mathbf{B} &amp;= 0
\end{align}</p>

<h2 id="your-workflow-remains-the-same">Your Workflow Remains the Same</h2>

<p>In your org-mode files, you just write:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\begin{equation}\label{newton}
F = ma
\end{equation}
</code></pre></div></div>

<p>Then reference with: <code class="language-plaintext highlighter-rouge">As shown in \eqref{newton}...</code></p>

<p>The system automatically handles the numbering and creates clickable links!</p>

<p>The export process handles everything automatically!</p>]]></content><author><name></name></author><category term="testing" /><category term="math" /><summary type="html"><![CDATA[Testing KaTeX Equation Numbering]]></summary></entry><entry><title type="html">Testing Modern Syntax Highlighting</title><link href="https://review.rob-blog.co.uk/testing/2025/01/21/testing-new-syntax-highlighting.html" rel="alternate" type="text/html" title="Testing Modern Syntax Highlighting" /><published>2025-01-21T00:00:00+00:00</published><updated>2025-01-21T00:00:00+00:00</updated><id>https://review.rob-blog.co.uk/testing/2025/01/21/testing-new-syntax-highlighting</id><content type="html" xml:base="https://review.rob-blog.co.uk/testing/2025/01/21/testing-new-syntax-highlighting.html"><![CDATA[<h1 id="modern-code-block-testing">Modern Code Block Testing</h1>

<p>Testing the new Prism.js syntax highlighting with your preferred languages:</p>

<h2 id="c-example">C++ Example</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span>
<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">TensorBuffer</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="p">[]</span><span class="o">&gt;</span> <span class="n">data_</span><span class="p">;</span>
    <span class="kt">size_t</span> <span class="n">size_</span><span class="p">;</span>

<span class="nl">public:</span>
    <span class="n">TensorBuffer</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span> <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">),</span> <span class="n">data_</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">T</span><span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="n">size</span><span class="p">))</span> <span class="p">{}</span>
    
    <span class="n">T</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[](</span><span class="kt">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">size_</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">(</span><span class="s">"Index out of bounds"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">data_</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="n">fill</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size_</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">data_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TensorBuffer</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">buffer</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
    <span class="n">buffer</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="mf">0.0</span><span class="n">f</span><span class="p">);</span>
    
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Buffer created with size: "</span> <span class="o">&lt;&lt;</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="python-example">Python Example</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="k">class</span> <span class="nc">FiniteVolumeMethod</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">boundary_conditions</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">grid_size</span> <span class="o">=</span> <span class="n">grid_size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">boundary_conditions</span> <span class="o">=</span> <span class="n">boundary_conditions</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">solution</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">grid_size</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">solve_poisson</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source_term</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">,</span> 
                     <span class="n">tolerance</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1e-6</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">:</span>
        <span class="s">"""
        Solve Poisson equation using finite volume method
        ∇²φ = f
        """</span>
        <span class="n">max_iterations</span> <span class="o">=</span> <span class="mi">10000</span>
        
        <span class="k">for</span> <span class="n">iteration</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_iterations</span><span class="p">):</span>
            <span class="n">old_solution</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
            
            <span class="c1"># Interior points
</span>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">grid_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="p">(</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">source_term</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="p">)</span>
            
            <span class="c1"># Apply boundary conditions
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">_apply_boundaries</span><span class="p">()</span>
            
            <span class="c1"># Check convergence
</span>            <span class="n">residual</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">solution</span> <span class="o">-</span> <span class="n">old_solution</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">residual</span> <span class="o">&lt;</span> <span class="n">tolerance</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Converged in </span><span class="si">{</span><span class="n">iteration</span><span class="si">}</span><span class="s"> iterations"</span><span class="p">)</span>
                <span class="k">break</span>
        
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">solution</span>
    
    <span class="k">def</span> <span class="nf">_apply_boundaries</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Apply Dirichlet boundary conditions"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">boundary_conditions</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'left'</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">solution</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">boundary_conditions</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'right'</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="rust-example">Rust Example</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">std</span><span class="p">::</span><span class="nn">fmt</span><span class="p">::</span><span class="n">Display</span><span class="p">;</span>

<span class="k">trait</span> <span class="n">ComputeBackend</span> <span class="p">{</span>
    <span class="k">type</span> <span class="n">Buffer</span><span class="p">;</span>
    <span class="k">type</span> <span class="n">Error</span><span class="p">;</span>
    
    <span class="k">fn</span> <span class="nf">allocate_buffer</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">size</span><span class="p">:</span> <span class="nb">usize</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">::</span><span class="n">Buffer</span><span class="p">,</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">copy_to_device</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="nb">f32</span><span class="p">],</span> <span class="n">buffer</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="k">Self</span><span class="p">::</span><span class="n">Buffer</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span>
    <span class="k">fn</span> <span class="nf">execute_kernel</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">kernel_name</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">,</span> <span class="n">buffer</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">Self</span><span class="p">::</span><span class="n">Buffer</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="k">Self</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>

<span class="nd">#[derive(Debug)]</span>
<span class="k">pub</span> <span class="k">struct</span> <span class="n">MetalBackend</span> <span class="p">{</span>
    <span class="n">device</span><span class="p">:</span> <span class="nn">metal</span><span class="p">::</span><span class="n">Device</span><span class="p">,</span>
    <span class="n">command_queue</span><span class="p">:</span> <span class="nn">metal</span><span class="p">::</span><span class="n">CommandQueue</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">impl</span> <span class="n">MetalBackend</span> <span class="p">{</span>
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">new</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="k">Self</span><span class="p">,</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nn">std</span><span class="p">::</span><span class="nn">error</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">device</span> <span class="o">=</span> <span class="nn">metal</span><span class="p">::</span><span class="nn">Device</span><span class="p">::</span><span class="nf">system_default</span><span class="p">()</span>
            <span class="nf">.ok_or</span><span class="p">(</span><span class="s">"No Metal device found"</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
        
        <span class="k">let</span> <span class="n">command_queue</span> <span class="o">=</span> <span class="n">device</span><span class="nf">.new_command_queue</span><span class="p">();</span>
        
        <span class="nf">Ok</span><span class="p">(</span><span class="n">MetalBackend</span> <span class="p">{</span> <span class="n">device</span><span class="p">,</span> <span class="n">command_queue</span> <span class="p">})</span>
    <span class="p">}</span>
    
    <span class="k">pub</span> <span class="k">fn</span> <span class="nf">create_compute_pipeline</span><span class="p">(</span><span class="o">&amp;</span><span class="k">self</span><span class="p">,</span> <span class="n">source</span><span class="p">:</span> <span class="o">&amp;</span><span class="nb">str</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="nn">metal</span><span class="p">::</span><span class="n">ComputePipelineState</span><span class="p">,</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nn">std</span><span class="p">::</span><span class="nn">error</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
        <span class="k">let</span> <span class="n">library</span> <span class="o">=</span> <span class="k">self</span><span class="py">.device</span><span class="nf">.new_library_with_source</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="o">&amp;</span><span class="nn">metal</span><span class="p">::</span><span class="nn">CompileOptions</span><span class="p">::</span><span class="nf">new</span><span class="p">())</span><span class="o">?</span><span class="p">;</span>
        <span class="k">let</span> <span class="n">function</span> <span class="o">=</span> <span class="n">library</span><span class="nf">.get_function</span><span class="p">(</span><span class="s">"saxpy"</span><span class="p">,</span> <span class="nb">None</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
        
        <span class="nf">Ok</span><span class="p">(</span><span class="k">self</span><span class="py">.device</span><span class="nf">.new_compute_pipeline_state_with_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">function</span><span class="p">)</span><span class="o">?</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">fn</span> <span class="nf">main</span><span class="p">()</span> <span class="k">-&gt;</span> <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span> <span class="nb">Box</span><span class="o">&lt;</span><span class="k">dyn</span> <span class="nn">std</span><span class="p">::</span><span class="nn">error</span><span class="p">::</span><span class="n">Error</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="k">let</span> <span class="n">backend</span> <span class="o">=</span> <span class="nn">MetalBackend</span><span class="p">::</span><span class="nf">new</span><span class="p">()</span><span class="o">?</span><span class="p">;</span>
    <span class="nd">println!</span><span class="p">(</span><span class="s">"Metal backend initialized successfully"</span><span class="p">);</span>
    <span class="nf">Ok</span><span class="p">(())</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="common-lisp-example">Common Lisp Example</h2>

<div class="language-lisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defpackage</span> <span class="ss">:tensor-lib</span>
  <span class="p">(</span><span class="ss">:use</span> <span class="ss">:cl</span><span class="p">)</span>
  <span class="p">(</span><span class="ss">:export</span> <span class="ss">#:tensor</span> <span class="ss">#:make-tensor</span> <span class="ss">#:tensor-ref</span> <span class="ss">#:tensor-dimensions</span>
           <span class="ss">#:matrix-multiply</span> <span class="ss">#:element-wise-add</span><span class="p">))</span>

<span class="p">(</span><span class="nb">in-package</span> <span class="ss">:tensor-lib</span><span class="p">)</span>

<span class="p">(</span><span class="nb">defclass</span> <span class="nv">tensor</span> <span class="p">()</span>
  <span class="p">((</span><span class="nv">data</span> <span class="ss">:initarg</span> <span class="ss">:data</span> <span class="ss">:accessor</span> <span class="nv">tensor-data</span><span class="p">)</span>
   <span class="p">(</span><span class="nv">dimensions</span> <span class="ss">:initarg</span> <span class="ss">:dimensions</span> <span class="ss">:accessor</span> <span class="nv">tensor-dimensions</span><span class="p">)</span>
   <span class="p">(</span><span class="nv">backend</span> <span class="ss">:initarg</span> <span class="ss">:backend</span> <span class="ss">:accessor</span> <span class="nv">tensor-backend</span> <span class="ss">:initform</span> <span class="ss">:cpu</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">make-tensor</span> <span class="p">(</span><span class="nv">dimensions</span> <span class="k">&amp;key</span> <span class="p">(</span><span class="nv">initial-value</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">(</span><span class="nv">backend</span> <span class="ss">:cpu</span><span class="p">))</span>
  <span class="s">"Create a new tensor with given dimensions"</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">total-size</span> <span class="p">(</span><span class="nb">reduce</span> <span class="nf">#'</span><span class="nb">*</span> <span class="nv">dimensions</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">make-instance</span> <span class="ss">'tensor</span>
                   <span class="ss">:data</span> <span class="p">(</span><span class="nb">make-array</span> <span class="nv">total-size</span> <span class="ss">:initial-element</span> <span class="nv">initial-value</span>
                                   <span class="ss">:element-type</span> <span class="ss">'single-float</span><span class="p">)</span>
                   <span class="ss">:dimensions</span> <span class="nv">dimensions</span>
                   <span class="ss">:backend</span> <span class="nv">backend</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">tensor-ref</span> <span class="p">((</span><span class="nv">tensor</span> <span class="nv">tensor</span><span class="p">)</span> <span class="k">&amp;rest</span> <span class="nv">indices</span><span class="p">)</span>
  <span class="s">"Reference a tensor element by indices"</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">flat-index</span> <span class="p">(</span><span class="nv">compute-flat-index</span> <span class="nv">indices</span> <span class="p">(</span><span class="nv">tensor-dimensions</span> <span class="nv">tensor</span><span class="p">))))</span>
    <span class="p">(</span><span class="nb">aref</span> <span class="p">(</span><span class="nv">tensor-data</span> <span class="nv">tensor</span><span class="p">)</span> <span class="nv">flat-index</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">compute-flat-index</span> <span class="p">(</span><span class="nv">indices</span> <span class="nv">dimensions</span><span class="p">)</span>
  <span class="s">"Convert multi-dimensional indices to flat array index"</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">index</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">multiplier</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">indices</span><span class="p">))</span> <span class="nv">downto</span> <span class="mi">0</span>
          <span class="nv">for</span> <span class="nv">dim-i</span> <span class="nv">from</span> <span class="p">(</span><span class="nb">1-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">dimensions</span><span class="p">))</span> <span class="nv">downto</span> <span class="mi">0</span>
          <span class="nb">do</span> <span class="p">(</span><span class="nb">incf</span> <span class="nv">index</span> <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nb">nth</span> <span class="nv">i</span> <span class="nv">indices</span><span class="p">)</span> <span class="nv">multiplier</span><span class="p">))</span>
             <span class="p">(</span><span class="nb">setf</span> <span class="nv">multiplier</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">multiplier</span> <span class="p">(</span><span class="nb">nth</span> <span class="nv">dim-i</span> <span class="nv">dimensions</span><span class="p">))))</span>
    <span class="nv">index</span><span class="p">))</span>

<span class="p">(</span><span class="nb">defmethod</span> <span class="nv">matrix-multiply</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">tensor</span><span class="p">)</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">tensor</span><span class="p">))</span>
  <span class="s">"Multiply two 2D tensors (matrices)"</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">a-dims</span> <span class="p">(</span><span class="nv">tensor-dimensions</span> <span class="nv">a</span><span class="p">))</span>
        <span class="p">(</span><span class="nv">b-dims</span> <span class="p">(</span><span class="nv">tensor-dimensions</span> <span class="nv">b</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">assert</span> <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">second</span> <span class="nv">a-dims</span><span class="p">)</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">b-dims</span><span class="p">))</span> <span class="p">()</span>
            <span class="s">"Matrix dimensions incompatible for multiplication"</span><span class="p">)</span>
    
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">result</span> <span class="p">(</span><span class="nv">make-tensor</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">a-dims</span><span class="p">)</span> <span class="p">(</span><span class="nb">second</span> <span class="nv">b-dims</span><span class="p">)))))</span>
      <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">below</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">a-dims</span><span class="p">)</span>
            <span class="nb">do</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">j</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">below</span> <span class="p">(</span><span class="nb">second</span> <span class="nv">b-dims</span><span class="p">)</span>
                     <span class="nb">do</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">k</span> <span class="nv">from</span> <span class="mi">0</span> <span class="nv">below</span> <span class="p">(</span><span class="nb">second</span> <span class="nv">a-dims</span><span class="p">)</span>
                              <span class="nb">do</span> <span class="p">(</span><span class="nb">incf</span> <span class="p">(</span><span class="nv">tensor-ref</span> <span class="nv">result</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">)</span>
                                     <span class="p">(</span><span class="nb">*</span> <span class="p">(</span><span class="nv">tensor-ref</span> <span class="nv">a</span> <span class="nv">i</span> <span class="nv">k</span><span class="p">)</span>
                                        <span class="p">(</span><span class="nv">tensor-ref</span> <span class="nv">b</span> <span class="nv">k</span> <span class="nv">j</span><span class="p">))))))</span>
      <span class="nv">result</span><span class="p">)))</span>

<span class="c1">;; Example usage</span>
<span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">matrix-a</span> <span class="p">(</span><span class="nv">make-tensor</span> <span class="o">'</span><span class="p">(</span><span class="mi">3</span> <span class="mi">4</span><span class="p">)))</span>
      <span class="p">(</span><span class="nv">matrix-b</span> <span class="p">(</span><span class="nv">make-tensor</span> <span class="o">'</span><span class="p">(</span><span class="mi">4</span> <span class="mi">2</span><span class="p">))))</span>
  <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">"Created matrices: ~A x ~A~%"</span> 
          <span class="p">(</span><span class="nv">tensor-dimensions</span> <span class="nv">matrix-a</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">tensor-dimensions</span> <span class="nv">matrix-b</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">matrix-multiply</span> <span class="nv">matrix-a</span> <span class="nv">matrix-b</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="lua-example">Lua Example</h2>

<div class="language-lua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- Tensor library for scientific computing</span>
<span class="kd">local</span> <span class="n">Tensor</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">Tensor</span><span class="p">.</span><span class="n">__index</span> <span class="o">=</span> <span class="n">Tensor</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="n">dimensions</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">{</span>
        <span class="n">dimensions</span> <span class="o">=</span> <span class="n">dimensions</span> <span class="ow">or</span> <span class="p">{},</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="n">backend</span> <span class="ow">or</span> <span class="s2">"cpu"</span><span class="p">,</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="p">}</span>
    
    <span class="c1">-- Calculate total size</span>
    <span class="kd">local</span> <span class="n">total_size</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">dim</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">dimensions</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">total_size</span> <span class="o">=</span> <span class="n">total_size</span> <span class="o">*</span> <span class="n">dim</span>
    <span class="k">end</span>
    
    <span class="c1">-- Initialize data</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">total_size</span> <span class="k">do</span>
        <span class="n">obj</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span>
    <span class="k">end</span>
    
    <span class="nb">setmetatable</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">obj</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">size</span><span class="p">()</span>
    <span class="k">return</span> <span class="o">#</span><span class="n">self</span><span class="p">.</span><span class="n">data</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">reshape</span><span class="p">(</span><span class="n">new_dimensions</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">total_size</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">dim</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">new_dimensions</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">total_size</span> <span class="o">=</span> <span class="n">total_size</span> <span class="o">*</span> <span class="n">dim</span>
    <span class="k">end</span>
    
    <span class="nb">assert</span><span class="p">(</span><span class="n">total_size</span> <span class="o">==</span> <span class="o">#</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="s2">"Cannot reshape: size mismatch"</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">dimensions</span> <span class="o">=</span> <span class="n">new_dimensions</span>
    <span class="k">return</span> <span class="n">self</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">get</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">indices</span> <span class="o">=</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
    <span class="kd">local</span> <span class="n">flat_index</span> <span class="o">=</span> <span class="n">self</span><span class="p">:</span><span class="n">_compute_flat_index</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">flat_index</span><span class="p">]</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">set</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">indices</span> <span class="o">=</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
    <span class="kd">local</span> <span class="n">flat_index</span> <span class="o">=</span> <span class="n">self</span><span class="p">:</span><span class="n">_compute_flat_index</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
    <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">flat_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">_compute_flat_index</span><span class="p">(</span><span class="n">indices</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">local</span> <span class="n">multiplier</span> <span class="o">=</span> <span class="mi">1</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="o">#</span><span class="n">indices</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="k">do</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">multiplier</span>
        <span class="n">multiplier</span> <span class="o">=</span> <span class="n">multiplier</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">dimensions</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">end</span>
    
    <span class="k">return</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c1">-- Lua uses 1-based indexing</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">apply</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="k">do</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="n">self</span>
<span class="k">end</span>

<span class="k">function</span> <span class="nf">Tensor</span><span class="p">:</span><span class="n">__tostring</span><span class="p">()</span>
    <span class="k">return</span> <span class="nb">string.format</span><span class="p">(</span><span class="s2">"Tensor%s [%s backend]"</span><span class="p">,</span> 
                        <span class="nb">table.concat</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">dimensions</span><span class="p">,</span> <span class="s2">"x"</span><span class="p">),</span> 
                        <span class="n">self</span><span class="p">.</span><span class="n">backend</span><span class="p">)</span>
<span class="k">end</span>

<span class="c1">-- Example usage</span>
<span class="kd">local</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
    <span class="kd">local</span> <span class="n">tensor</span> <span class="o">=</span> <span class="n">Tensor</span><span class="p">:</span><span class="n">new</span><span class="p">({</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span> <span class="s2">"metal"</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Created:"</span><span class="p">,</span> <span class="n">tensor</span><span class="p">)</span>
    
    <span class="c1">-- Fill with some values</span>
    <span class="kd">local</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">tensor</span><span class="p">:</span><span class="n">size</span><span class="p">()</span> <span class="k">do</span>
        <span class="n">tensor</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">0</span><span class="p">.</span><span class="mi">1</span>
    <span class="k">end</span>
    
    <span class="c1">-- Apply a function</span>
    <span class="n">tensor</span><span class="p">:</span><span class="n">apply</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="nb">math.sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
    
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Applied sine function to all elements"</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"Element at (1,1,1):"</span><span class="p">,</span> <span class="n">tensor</span><span class="p">:</span><span class="n">get</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">end</span>

<span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>This demonstrates the new modern syntax highlighting with copy buttons, line numbers, and clean styling for all your preferred languages!</p>]]></content><author><name></name></author><category term="testing" /><summary type="html"><![CDATA[Modern Code Block Testing]]></summary></entry></feed>